{"version":3,"sources":["Menu.js","App.js","serviceWorker.js","index.js"],"names":["MyMenu","Menu","inverted","style","fontSize","Item","name","active","this","props","activeItem","onClick","handleItemClick","Icon","React","Component","App","state","page","handleMenuChange","bind","a","newState","setState","Header","as","textAlign","paddingTop","Container","map","Segment","Group","Grid","ui","centered","Row","Button","positive","size","primary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAwCeA,E,uKApCH,IAAD,OACP,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAO,CAACC,SAAU,SAC/B,kBAACH,EAAA,EAAKI,KAAN,CACEC,KAAK,OACLC,OAAkC,SAA1BC,KAAKC,MAAMC,WACnBC,QAAS,kBAAM,EAAKF,MAAMG,gBAAgB,UAExC,kBAACC,EAAA,EAAD,CAAMP,KAAK,YALf,8CASA,kBAACL,EAAA,EAAKI,KAAN,CACEC,KAAK,SACLC,OAAkC,WAA1BC,KAAKC,MAAMC,WACnBC,QAAS,kBAAM,EAAKF,MAAMG,gBAAgB,YAExC,kBAACC,EAAA,EAAD,CAAMP,KAAK,SALf,4BASA,kBAACL,EAAA,EAAKI,KAAN,CACEC,KAAK,WACLC,OAAkC,aAA1BC,KAAKC,MAAMC,WACnBC,QAAS,kBAAM,EAAKF,MAAMG,gBAAgB,cAExC,kBAACC,EAAA,EAAD,CAAMP,KAAK,eALf,0D,GAvBWQ,IAAMC,WC6EZC,E,kDA7Db,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CACXC,KAAM,QAER,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBALP,E,6DAQFC,GACf,IAAIC,EAAWd,KAAKS,MACpBK,EAASJ,KAAOG,EAChBb,KAAKe,SAASD,K,+BAKd,OACE,6BACE,kBAACE,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAASvB,MAAO,CAAEwB,WAAY,SACrD,kBAACd,EAAA,EAAD,CAAMP,KAAK,mBADd,wFAIA,kBAACsB,EAAA,EAAD,KACE,kBAAC,EAAD,CACElB,WAAYF,KAAKS,MAAMC,KACvBN,gBAAiBJ,KAAKW,mBAEvB,CAACX,KAAKS,MAAMC,MAAMW,KAAI,SAACX,GACtB,MAAY,QAARA,EAEA,kBAACY,EAAA,EAAQC,MAAT,KACE,kBAACD,EAAA,EAAD,KACE,kBAACN,EAAA,EAAD,CAAQC,GAAG,MAAX,sSAC2D,MAG7D,kBAACK,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAMC,IAAE,EAACC,UAAQ,GACf,kBAACF,EAAA,EAAKG,IAAN,KACE,kBAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,KAAK,WAAtB,oFAIF,kBAACN,EAAA,EAAKG,IAAN,CAAUhC,MAAO,CAAEwB,WAAY,IAC7B,kBAACS,EAAA,EAAD,CAAQG,SAAO,EAACD,KAAK,WAClB,IADH,4HASA,UAARpB,EAAyB,4CAA7B,W,GAtDMJ,IAAMC,WCNJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91d1ef73.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\n\nclass MyMenu extends React.Component {\n  render() {\n    return (\n      <div>\n        <Menu inverted style={{fontSize: \"16px\"}} >\n          <Menu.Item\n            name=\"main\"\n            active={this.props.activeItem === \"main\"}\n            onClick={() => this.props.handleItemClick('main')}\n          >\n              <Icon name='content' />\n            Главная\n          </Menu.Item>\n\n          <Menu.Item\n            name=\"people\"\n            active={this.props.activeItem === \"people\"}\n            onClick={() => this.props.handleItemClick('people')}\n          >\n              <Icon name='user' />\n            Люди\n          </Menu.Item>\n\n          <Menu.Item\n            name=\"products\"\n            active={this.props.activeItem === \"products\"}\n            onClick={() => this.props.handleItemClick('products')}\n          >\n              <Icon name='calculator' />\n            Продукты\n          </Menu.Item>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default MyMenu;\n","import React from \"react\";\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Item,\n  Label,\n  Menu,\n  Segment,\n  Step,\n  Table,\n  GridColumn,\n} from \"semantic-ui-react\";\nimport MyMenu from \"./Menu.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: \"main\",\n    };\n    this.handleMenuChange = this.handleMenuChange.bind(this);\n  }\n\n  handleMenuChange(a) {\n    let newState = this.state;\n    newState.page = a;\n    this.setState(newState);\n    //console.log(\"menu changed: \" + a);\n  }\n\n  render() {\n    return (\n      <div>\n        <Header as=\"h1\" textAlign=\"center\" style={{ paddingTop: \"20px\" }}>\n           <Icon name=\"clipboard list\" /> \n          СколькоСкинуть\n        </Header>\n        <Container>\n          <MyMenu\n            activeItem={this.state.page}\n            handleItemClick={this.handleMenuChange}\n          />\n          {[this.state.page].map((page) => {\n            if (page == \"main\")\n              return (\n                <Segment.Group>\n                  <Segment>\n                    <Header as=\"h3\">\n                      Приветствие и яркое описание приложения (мб со скринами){\" \"}\n                    </Header>\n                  </Segment>\n                  <Segment>\n                    <Grid ui centered>\n                      <Grid.Row>\n                        <Button positive size=\"massive\">\n                          Создать проект\n                        </Button>\n                      </Grid.Row>\n                      <Grid.Row style={{ paddingTop: 0 }}>\n                        <Button primary size=\"massive\">\n                          {\" \"}\n                          Войти через ВКонтакте\n                        </Button>\n                      </Grid.Row>\n                    </Grid>\n                  </Segment>\n                </Segment.Group>\n              );\n            if (page == \"people\") return <div>people</div>;\n          })}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}